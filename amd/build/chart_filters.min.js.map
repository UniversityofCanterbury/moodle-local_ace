{"version":3,"sources":["../src/chart_filters.js"],"names":["Selectors","chartFilterOptions","courseToDate","last12Days","dateRange","updateFunc","init","providedFunc","filter","getActiveFilter","getChartFilterPreference","then","response","error","preferences","value","getFilterNodes","forEach","element","id","set12DaysFilter","setCourseToDateFilter","setupFilters","document","querySelector","setActiveFilter","date","Date","setDate","getDate","val","getTime","toFixed","suppliedFilter","dataset","updateChartFilterPreference","updateFilterDisplay","filtersNode","courseToDateFilter","addEventListener","picker","clearSelection","last12DaysFilter","dateRangeFilter","Litepicker","format","singleMode","splitView","setup","on","date1","date2","timestamp","classList","add","remove","filters","find","activeFilter","Ajax","call","methodname","args","type","fail","Notification","exception","name"],"mappings":"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","sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Provides the chart filters for engagement graphs\n *\n * @module      local_ace/chart_filters\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Litepicker from 'local_ace/litepicker';\nimport Ajax from 'core/ajax';\n\nconst FILTER_ACTIVE = \"active\";\n\nconst Selectors = {\n    chartFilterOptions: \"#chart-filter-options\",\n    courseToDate: \"#course-to-date\",\n    last12Days: \"#last-12-days\",\n    dateRange: \"#date-range\",\n};\n\nlet updateFunc = null;\n\n/**\n * Retrieves data from the local_ace webservice to populate an engagement graph\n *\n * @param {Function} providedFunc graph function\n */\nexport const init = (providedFunc) => {\n    updateFunc = providedFunc;\n    // Set default filter, update display, set handlers\n    let filter = getActiveFilter();\n    if (filter === null) {\n        // Get the user preference, attempt to set the filter. Fall back to the course to date filter.\n        getChartFilterPreference().then(response => {\n            if (response.error) {\n                return;\n            }\n            if (response.preferences[0].value !== null) {\n                // Set the filter based on the filter node that matches the given filter ID.\n                getFilterNodes().forEach((element) => {\n                    if (element.id === response.preferences[0].value) {\n                        if (element.id === 'last-12-days') {\n                            set12DaysFilter();\n                        } else if (element.id === 'course-to-date') {\n                            setCourseToDateFilter();\n                        }\n                    }\n                });\n            }\n        }).then(() => {\n            // If setting via user preference fails we set the default.\n            if (getActiveFilter() === null) {\n                setCourseToDateFilter();\n            }\n        });\n    }\n\n    setupFilters();\n};\n\n\n/**\n * Set course to date filter.\n */\nconst setCourseToDateFilter = () => {\n    let filter = document.querySelector(Selectors.courseToDate);\n    setActiveFilter(filter);\n    updateFunc(null, null);\n};\n\n/**\n * Set the last 12 days filter.\n */\nconst set12DaysFilter = () => {\n    let filter = document.querySelector(Selectors.last12Days);\n    setActiveFilter(filter);\n    let date = new Date();\n    date.setDate(date.getDate() - 12);\n    let val = date.getTime() / 1000;\n    updateFunc(val.toFixed(0), null);\n};\n\n/**\n * Set the active filter.\n *\n * @param {Element} suppliedFilter\n */\nconst setActiveFilter = (suppliedFilter) => {\n    getFilterNodes().forEach((filter) => {\n        if (filter === suppliedFilter) {\n            filter.dataset.filter = FILTER_ACTIVE;\n\n            // We can't store the date range as a user preference because of the extra params required.\n            if (filter.id !== 'date-range') {\n                updateChartFilterPreference(filter.id);\n            }\n        } else {\n            filter.dataset.filter = null;\n        }\n        updateFilterDisplay(filter);\n    });\n};\n\n/**\n * Set up the click/change listeners on the filter buttons.\n * When detected set the active filter and pass the new date through to the graph.\n */\nconst setupFilters = () => {\n    let filtersNode = document.querySelector(Selectors.chartFilterOptions);\n\n    let courseToDateFilter = filtersNode.querySelector(Selectors.courseToDate);\n    courseToDateFilter.addEventListener(\"click\", () => {\n        setCourseToDateFilter();\n        picker.clearSelection();\n    });\n\n    let last12DaysFilter = filtersNode.querySelector(Selectors.last12Days);\n    last12DaysFilter.addEventListener(\"click\", () => {\n        set12DaysFilter();\n        picker.clearSelection();\n    });\n\n    let dateRangeFilter = filtersNode.querySelector(Selectors.dateRange);\n    let picker = new Litepicker({\n        format: 'DD-MM-YYYY',\n        element: dateRangeFilter,\n        singleMode: false,\n        splitView: false,\n        setup: (picker) => {\n            picker.on('selected', (date1, date2) => {\n                if (date1 === undefined || date2 === undefined) {\n                    return;\n                }\n                setActiveFilter(dateRangeFilter);\n                updateFunc(date1.timestamp() / 1000, date2.timestamp() / 1000);\n            });\n        }\n    });\n    picker.clearSelection();\n};\n\n/**\n * Update the filter colours to display which is active.\n *\n * @param {Element} filter\n */\nconst updateFilterDisplay = (filter) => {\n    if (filter.dataset.filter === FILTER_ACTIVE) {\n        filter.classList.add(\"btn-primary\");\n        filter.classList.remove(\"btn-secondary\");\n    } else {\n        filter.classList.add(\"btn-secondary\");\n        filter.classList.remove(\"btn-primary\");\n    }\n};\n\n/**\n * Get the active filter DOM element.\n *\n * @returns {null|Element}\n */\nconst getActiveFilter = () => {\n    let filters = getFilterNodes();\n    let filter = filters.find(filter => filter.dataset.filter === FILTER_ACTIVE);\n    if (filter !== undefined) {\n        return filter;\n    }\n    return null;\n};\n\n/**\n * Get the DOM element of chart filters on the page.\n *\n * @returns {[Element]}\n */\nconst getFilterNodes = () => {\n    let filtersNode = document.querySelector(Selectors.chartFilterOptions);\n    return [\n        filtersNode.querySelector(Selectors.courseToDate),\n        filtersNode.querySelector(Selectors.last12Days),\n        filtersNode.querySelector(Selectors.dateRange)\n    ];\n};\n\n/**\n * Updates the comparison method user preference.\n *\n * @param {string} activeFilter Filter ID\n */\nconst updateChartFilterPreference = function(activeFilter) {\n    let request = {\n        methodname: 'core_user_update_user_preferences',\n        args: {\n            preferences: [\n                {\n                    type: 'local_ace_default_chart_filter',\n                    value: activeFilter\n                }\n            ]\n        }\n    };\n\n    Ajax.call([request])[0].fail(Notification.exception);\n};\n\n/**\n * Return a promise for the comparison method user preference.\n *\n * @returns {Promise}\n */\nconst getChartFilterPreference = function() {\n    let request = {\n        methodname: 'core_user_get_user_preferences',\n        args: {\n            name: 'local_ace_default_chart_filter'\n        }\n    };\n    return Ajax.call([request])[0];\n};\n"],"file":"chart_filters.min.js"}