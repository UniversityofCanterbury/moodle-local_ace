{"version":3,"file":"chart_filters.min.js","sources":["../src/chart_filters.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Provides the chart filters for engagement graphs\n *\n * @module      local_ace/chart_filters\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Litepicker from 'local_ace/litepicker';\nimport Ajax from 'core/ajax';\n\nconst FILTER_ACTIVE = \"active\";\n\nconst Selectors = {\n    chartFilterOptions: \"#chart-filter-options\",\n    courseToDate: \"#course-to-date\",\n    last12Days: \"#last-12-days\",\n    dateRange: \"#date-range\",\n};\n\nlet updateFunc = null;\n\n/**\n * Retrieves data from the local_ace webservice to populate an engagement graph\n *\n * @param {Function} providedFunc graph function\n */\nexport const init = (providedFunc) => {\n    updateFunc = providedFunc;\n    // Set default filter, update display, set handlers\n    let filter = getActiveFilter();\n    if (filter === null) {\n        // Get the user preference, attempt to set the filter. Fall back to the course to date filter.\n        getChartFilterPreference().then(response => {\n            if (response.error) {\n                return;\n            }\n            if (response.preferences[0].value !== null) {\n                // Set the filter based on the filter node that matches the given filter ID.\n                getFilterNodes().forEach((element) => {\n                    if (element.id === response.preferences[0].value) {\n                        if (element.id === 'last-12-days') {\n                            set12DaysFilter();\n                        } else if (element.id === 'course-to-date') {\n                            setCourseToDateFilter();\n                        }\n                    }\n                });\n            }\n        }).then(() => {\n            // If setting via user preference fails we set the default.\n            if (getActiveFilter() === null) {\n                setCourseToDateFilter();\n            }\n        });\n    }\n\n    setupFilters();\n};\n\n\n/**\n * Set course to date filter.\n */\nconst setCourseToDateFilter = () => {\n    let filter = document.querySelector(Selectors.courseToDate);\n    setActiveFilter(filter);\n    updateFunc(null, null);\n};\n\n/**\n * Set the last 12 days filter.\n */\nconst set12DaysFilter = () => {\n    let filter = document.querySelector(Selectors.last12Days);\n    setActiveFilter(filter);\n    let date = new Date();\n    date.setDate(date.getDate() - 12);\n    let val = date.getTime() / 1000;\n    updateFunc(val.toFixed(0), null);\n};\n\n/**\n * Set the active filter.\n *\n * @param {Element} suppliedFilter\n */\nconst setActiveFilter = (suppliedFilter) => {\n    getFilterNodes().forEach((filter) => {\n        if (filter === suppliedFilter) {\n            filter.dataset.filter = FILTER_ACTIVE;\n\n            // We can't store the date range as a user preference because of the extra params required.\n            if (filter.id !== 'date-range') {\n                updateChartFilterPreference(filter.id);\n            }\n        } else {\n            filter.dataset.filter = null;\n        }\n        updateFilterDisplay(filter);\n    });\n};\n\n/**\n * Set up the click/change listeners on the filter buttons.\n * When detected set the active filter and pass the new date through to the graph.\n */\nconst setupFilters = () => {\n    let filtersNode = document.querySelector(Selectors.chartFilterOptions);\n\n    let courseToDateFilter = filtersNode.querySelector(Selectors.courseToDate);\n    courseToDateFilter.addEventListener(\"click\", () => {\n        setCourseToDateFilter();\n        picker.clearSelection();\n    });\n\n    let last12DaysFilter = filtersNode.querySelector(Selectors.last12Days);\n    last12DaysFilter.addEventListener(\"click\", () => {\n        set12DaysFilter();\n        picker.clearSelection();\n    });\n\n    let dateRangeFilter = filtersNode.querySelector(Selectors.dateRange);\n    let picker = new Litepicker({\n        format: 'DD-MM-YYYY',\n        element: dateRangeFilter,\n        singleMode: false,\n        splitView: false,\n        setup: (picker) => {\n            picker.on('selected', (date1, date2) => {\n                if (date1 === undefined || date2 === undefined) {\n                    return;\n                }\n                setActiveFilter(dateRangeFilter);\n                updateFunc(date1.timestamp() / 1000, date2.timestamp() / 1000);\n            });\n        }\n    });\n    picker.clearSelection();\n};\n\n/**\n * Update the filter colours to display which is active.\n *\n * @param {Element} filter\n */\nconst updateFilterDisplay = (filter) => {\n    if (filter.dataset.filter === FILTER_ACTIVE) {\n        filter.classList.add(\"btn-primary\");\n        filter.classList.remove(\"btn-secondary\");\n    } else {\n        filter.classList.add(\"btn-secondary\");\n        filter.classList.remove(\"btn-primary\");\n    }\n};\n\n/**\n * Get the active filter DOM element.\n *\n * @returns {null|Element}\n */\nconst getActiveFilter = () => {\n    let filters = getFilterNodes();\n    let filter = filters.find(filter => filter.dataset.filter === FILTER_ACTIVE);\n    if (filter !== undefined) {\n        return filter;\n    }\n    return null;\n};\n\n/**\n * Get the DOM element of chart filters on the page.\n *\n * @returns {[Element]}\n */\nconst getFilterNodes = () => {\n    let filtersNode = document.querySelector(Selectors.chartFilterOptions);\n    return [\n        filtersNode.querySelector(Selectors.courseToDate),\n        filtersNode.querySelector(Selectors.last12Days),\n        filtersNode.querySelector(Selectors.dateRange)\n    ];\n};\n\n/**\n * Updates the comparison method user preference.\n *\n * @param {string} activeFilter Filter ID\n */\nconst updateChartFilterPreference = function(activeFilter) {\n    let request = {\n        methodname: 'core_user_update_user_preferences',\n        args: {\n            preferences: [\n                {\n                    type: 'local_ace_default_chart_filter',\n                    value: activeFilter\n                }\n            ]\n        }\n    };\n\n    Ajax.call([request])[0].fail(Notification.exception);\n};\n\n/**\n * Return a promise for the comparison method user preference.\n *\n * @returns {Promise}\n */\nconst getChartFilterPreference = function() {\n    let request = {\n        methodname: 'core_user_get_user_preferences',\n        args: {\n            name: 'local_ace_default_chart_filter'\n        }\n    };\n    return Ajax.call([request])[0];\n};\n"],"names":["Selectors","updateFunc","providedFunc","getActiveFilter","getChartFilterPreference","then","response","error","preferences","value","getFilterNodes","forEach","element","id","set12DaysFilter","setCourseToDateFilter","setupFilters","filter","document","querySelector","setActiveFilter","date","Date","setDate","getDate","val","getTime","toFixed","suppliedFilter","dataset","updateChartFilterPreference","updateFilterDisplay","filtersNode","addEventListener","picker","clearSelection","dateRangeFilter","Litepicker","format","singleMode","splitView","setup","on","date1","date2","undefined","timestamp","classList","add","remove","find","activeFilter","request","methodname","args","type","call","fail","Notification","exception","Ajax","name"],"mappings":";;;;;;;0KA4BMA,6BACkB,wBADlBA,uBAEY,kBAFZA,qBAGU,gBAHVA,oBAIS,cAGXC,WAAa,mBAOG,SAACC,cACjBD,WAAaC,aAGE,OADFC,mBAGTC,2BAA2BC,MAAK,SAAAC,UACxBA,SAASC,OAGyB,OAAlCD,SAASE,YAAY,GAAGC,OAExBC,iBAAiBC,SAAQ,SAACC,SAClBA,QAAQC,KAAOP,SAASE,YAAY,GAAGC,QACpB,iBAAfG,QAAQC,GACRC,kBACsB,mBAAfF,QAAQC,IACfE,+BAKjBV,MAAK,WAEsB,OAAtBF,mBACAY,2BAKZC,oBAOED,sBAAwB,eACtBE,OAASC,SAASC,cAAcnB,wBACpCoB,gBAAgBH,QAChBhB,WAAW,KAAM,OAMfa,gBAAkB,eAChBG,OAASC,SAASC,cAAcnB,sBACpCoB,gBAAgBH,YACZI,KAAO,IAAIC,KACfD,KAAKE,QAAQF,KAAKG,UAAY,QAC1BC,IAAMJ,KAAKK,UAAY,IAC3BzB,WAAWwB,IAAIE,QAAQ,GAAI,OAQzBP,gBAAkB,SAACQ,gBACrBlB,iBAAiBC,SAAQ,SAACM,QAClBA,SAAWW,gBACXX,OAAOY,QAAQZ,OA/EL,SAkFQ,eAAdA,OAAOJ,IACPiB,4BAA4Bb,OAAOJ,KAGvCI,OAAOY,QAAQZ,OAAS,KAE5Bc,oBAAoBd,YAQtBD,aAAe,eACbgB,YAAcd,SAASC,cAAcnB,8BAEhBgC,YAAYb,cAAcnB,wBAChCiC,iBAAiB,SAAS,WACzClB,wBACAmB,OAAOC,oBAGYH,YAAYb,cAAcnB,sBAChCiC,iBAAiB,SAAS,WACvCnB,kBACAoB,OAAOC,wBAGPC,gBAAkBJ,YAAYb,cAAcnB,qBAC5CkC,OAAS,IAAIG,oBAAW,CACxBC,OAAQ,aACR1B,QAASwB,gBACTG,YAAY,EACZC,WAAW,EACXC,MAAO,SAACP,QACJA,OAAOQ,GAAG,YAAY,SAACC,MAAOC,YACZC,IAAVF,YAAiCE,IAAVD,QAG3BxB,gBAAgBgB,iBAChBnC,WAAW0C,MAAMG,YAAc,IAAMF,MAAME,YAAc,YAIrEZ,OAAOC,kBAQLJ,oBAAsB,SAACd,QAvIP,WAwIdA,OAAOY,QAAQZ,QACfA,OAAO8B,UAAUC,IAAI,eACrB/B,OAAO8B,UAAUE,OAAO,mBAExBhC,OAAO8B,UAAUC,IAAI,iBACrB/B,OAAO8B,UAAUE,OAAO,iBAS1B9C,gBAAkB,eAEhBc,OADUP,iBACOwC,MAAK,SAAAjC,cAxJR,WAwJkBA,OAAOY,QAAQZ,sBACpC4B,IAAX5B,OACOA,OAEJ,MAQLP,eAAiB,eACfsB,YAAcd,SAASC,cAAcnB,oCAClC,CACHgC,YAAYb,cAAcnB,wBAC1BgC,YAAYb,cAAcnB,sBAC1BgC,YAAYb,cAAcnB,uBAS5B8B,4BAA8B,SAASqB,kBACrCC,QAAU,CACVC,WAAY,oCACZC,KAAM,CACF9C,YAAa,CACT,CACI+C,KAAM,iCACN9C,MAAO0C,+BAMlBK,KAAK,CAACJ,UAAU,GAAGK,KAAKC,aAAaC,YAQxCvD,yBAA2B,kBAOtBwD,cAAKJ,KAAK,CANH,CACVH,WAAY,iCACZC,KAAM,CACFO,KAAM,qCAGc"}