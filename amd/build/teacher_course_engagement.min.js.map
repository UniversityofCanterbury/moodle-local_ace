{"version":3,"file":"teacher_course_engagement.min.js","sources":["../src/teacher_course_engagement.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Shows the teacher course engagement graph\n *\n * @module      local_ace/teacher_course_engagement\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport ChartBuilder from 'core/chart_builder';\nimport ChartJSOutput from 'core/chart_output_chartjs';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from \"core/modal_events\";\nimport Templates from \"core/templates\";\nimport {init as filtersInit} from 'local_ace/chart_filters';\n\n// List of course shortnames hidden on the graph.\nlet HIDDEN_COURSES = [];\n// List of courses that could be displayed on the graph, updated after fetching engagement data.\nlet COURSES = [];\nlet COLOURS = [];\n\nexport const init = (parameters) => {\n    COLOURS = parameters.colours;\n    filtersInit(updateGraph);\n\n    document.querySelector(\"#course-filter\").addEventListener(\"click\", courseFilter);\n};\n\n/**\n * Presents a modal for user to select courses to be shown, hides all unselected courses.\n */\nconst courseFilter = () => {\n    var modalPromise = ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL});\n\n    modalPromise.then(function(modal) {\n        modal.getRoot()[0].classList.add('local_ace-slim-modal');\n        modal.setTitle(\"Course filter\");\n        let templatePromise = Templates.render('local_ace/course_filter_modal', {courses: COURSES});\n        modal.setBody(templatePromise);\n        modal.setSaveButtonText(\"Filter\");\n\n        // Set any course that is hidden to be unchecked in modal.\n        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n            HIDDEN_COURSES.forEach((shortname) => {\n                let input = document.querySelector('input[id=course-filter-' + shortname + ']');\n                if (input !== null) {\n                    input.checked = false;\n                }\n            });\n        });\n\n        // Update the hidden courses list, hiding them on the chart and legend.\n        modal.getRoot().on(ModalEvents.save, function() {\n            let checkedCourses = document.querySelectorAll('input[name=\"course-filter-options\"]:not(:checked)');\n            checkedCourses.forEach((ele) => {\n                if (!HIDDEN_COURSES.includes(ele.value)) {\n                    HIDDEN_COURSES.push(ele.value);\n                }\n            });\n            updateGraph();\n        });\n\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden, removes modal HTML from document.\n            modal.destroy();\n        });\n\n        modal.show();\n        return modal;\n    }).fail(Notification.exception);\n};\n\nconst updateGraph = (startDate, endDate) => {\n    let engagementData = getTeacherCourseEngagementData(startDate, endDate).then((response) => {\n        if (response.error !== null || response.series.length === 0) {\n            displayError(response.error);\n            return null;\n        }\n        let data = getGraphDataPlaceholder();\n        // Reset courses list, stops us from showing courses that are no longer returned.\n        COURSES = [];\n        let i = 0;\n        response.series.forEach((series) => {\n            COURSES.push({shortname: series.label});\n            let seriesData = getSeriesPlaceholder();\n            seriesData.label = series.label;\n            seriesData.values = series.values;\n            // Choose a colour from the array and wrap around when reaching the end.\n            seriesData.colors = [COLOURS[i % COLOURS.length]];\n            i++;\n            data.series.push(seriesData);\n        });\n        data.labels = response.xlabels;\n        data.axes.y[0].max = 100;\n        data.axes.y[0].stepSize = 25;\n        let yLabels = {};\n        response.ylabels.forEach((element) => {\n            yLabels[element.value] = element.label;\n        });\n        data.axes.y[0].labels = yLabels;\n\n        if (response.series.length > 8) {\n            document.querySelector(\"#course-filter-wrap\").style.display = null;\n        }\n\n        return data;\n    }).catch(() => {\n        displayError(\"API Error\");\n    });\n\n    engagementData.then((data) => {\n        if (data === null) {\n            return;\n        }\n        let chartArea = document.querySelector('#chart-area-engagement');\n        let chartImage = chartArea.querySelector('.chart-image');\n        chartImage.innerHTML = \"\";\n        ChartBuilder.make(data).then((chart) => {\n            let chartoutput = new ChartJSOutput(chartImage, chart);\n\n            // Hides courses based on user preferences.\n            getHiddenCourses().then(response => {\n                if (response.error) {\n                    return;\n                }\n                let courseList = response.preferences[0].value;\n                if (courseList === null) {\n                    return;\n                }\n                HIDDEN_COURSES = courseList.split(\",\");\n                // Get the specific chartjs instance created by the graph output.\n                let chartjs = chartoutput._chartjs;\n                for (let dataset in chartjs.data.datasets) {\n                    let datasetObject = chartjs.data.datasets[dataset];\n                    if (HIDDEN_COURSES.includes(datasetObject.label)) {\n                        datasetObject.hidden = true;\n                    }\n                }\n                chartjs.update();\n                return;\n            }).fail(Notification.exception);\n            return;\n        }).catch();\n        return;\n    }).catch();\n};\n\nconst getSeriesPlaceholder = () => {\n    return {\n        \"label\": \"\",\n        \"labels\": null,\n        \"type\": null,\n        \"values\": [],\n        \"colors\": [],\n        \"fill\": null,\n        \"axes\": {\n            \"x\": null,\n            \"y\": null\n        },\n        \"urls\": [],\n        \"smooth\": null\n    };\n};\n\nconst getGraphDataPlaceholder = () => {\n    return {\n        \"type\": \"line\",\n        \"series\": [],\n        \"labels\": [],\n        \"title\": \"Course Engagement\",\n        \"axes\": {\n            \"x\": [],\n            \"y\": [\n                {\n                    \"label\": null,\n                    \"labels\": {},\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"position\": null,\n                    \"stepSize\": null\n                }\n            ]\n        },\n        \"legend_options\": {\n            \"display\": true,\n            \"position\": 'right',\n            \"onClick\": legendClickHandler\n        },\n        \"config_colorset\": null,\n        \"smooth\": true\n    };\n};\n\n/**\n * Handles clicks on dataset legends.\n *\n * @param {Object} e Event\n * @param {Object} legendItem Chart.JS Legend item\n */\nconst legendClickHandler = function(e, legendItem) {\n    let index = legendItem.datasetIndex;\n    let ci = this.chart;\n    let meta = ci.getDatasetMeta(index);\n\n    if (meta.hidden === null) {\n        if (ci.data.datasets[index].hidden) {\n            HIDDEN_COURSES = HIDDEN_COURSES.filter(course => course !== ci.data.datasets[index].label);\n            updateHiddenCourses();\n            ci.data.datasets[index].hidden = false;\n        } else {\n            HIDDEN_COURSES.push(ci.data.datasets[index].label);\n            updateHiddenCourses();\n            ci.data.datasets[index].hidden = true;\n        }\n    }\n\n    ci.update();\n};\n\n/**\n * Updates the hidden courses user preference, based on the HIDDEN_COURSES array.\n */\nconst updateHiddenCourses = function() {\n    let request = {\n        methodname: 'core_user_update_user_preferences',\n        args: {\n            preferences: [\n                {\n                    type: 'local_ace_teacher_hidden_courses',\n                    value: HIDDEN_COURSES.join(\",\")\n                }\n            ]\n        }\n    };\n\n    Ajax.call([request])[0]\n        .fail(Notification.exception);\n};\n\n/**\n * Gets the hidden courses from the user preferences.\n *\n * @returns {Promise}\n */\nconst getHiddenCourses = function() {\n    let request = {\n        methodname: 'core_user_get_user_preferences',\n        args: {\n            name: 'local_ace_teacher_hidden_courses'\n        }\n    };\n    return Ajax.call([request])[0];\n};\n\n/**\n * Display an error on the page, which replaces the engagement graphs on the page.\n *\n * @param {string} langString Text displayed on the page\n */\nconst displayError = (langString) => {\n    let chartArea = document.querySelector('#chart-area-engagement');\n    let chartImage = chartArea.querySelector('.chart-image');\n    chartImage.innerHTML = langString;\n};\n\n/**\n * Get teacher course analytics data\n *\n * @param {Number|null} start Start time of analytics period in seconds\n * @param {Number|null} end End of analytics period in seconds\n * @returns {Promise}\n */\nconst getTeacherCourseEngagementData = (start, end) => {\n    return Ajax.call([{\n        methodname: 'local_ace_get_teacher_course_analytics_graph',\n        args: {\n            'start': start,\n            'end': end\n        },\n    }])[0];\n};\n"],"names":["HIDDEN_COURSES","COURSES","COLOURS","parameters","colours","updateGraph","document","querySelector","addEventListener","courseFilter","ModalFactory","create","type","types","SAVE_CANCEL","then","modal","getRoot","classList","add","setTitle","templatePromise","Templates","render","courses","setBody","setSaveButtonText","on","ModalEvents","bodyRendered","forEach","shortname","input","checked","save","querySelectorAll","ele","includes","value","push","hidden","destroy","show","fail","Notification","exception","startDate","endDate","getTeacherCourseEngagementData","response","error","series","length","displayError","data","getGraphDataPlaceholder","i","label","seriesData","getSeriesPlaceholder","values","colors","labels","xlabels","axes","y","max","stepSize","yLabels","ylabels","element","style","display","catch","chartImage","innerHTML","make","chart","chartoutput","ChartJSOutput","getHiddenCourses","courseList","preferences","split","chartjs","_chartjs","dataset","datasets","datasetObject","update","legendClickHandler","e","legendItem","index","datasetIndex","ci","this","getDatasetMeta","filter","course","updateHiddenCourses","request","methodname","args","join","call","Ajax","name","langString","start","end"],"mappings":"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"}