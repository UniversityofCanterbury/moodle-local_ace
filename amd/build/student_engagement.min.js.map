{"version":3,"file":"student_engagement.min.js","sources":["../src/student_engagement.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Uses the local_ace webservices to create engagement charts\n *\n * @module      local_ace/student_engagement\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport ModalEvents from 'core/modal_events';\nimport ChartBuilder from 'core/chart_builder';\nimport ChartJSOutput from 'core/chart_output_chartjs';\nimport Notification from 'core/notification';\nimport {init as filtersInit} from 'local_ace/chart_filters';\n\nlet USER_ID = {};\n// Stores the chosen comparison method.\nlet COMPARISON_OPTION = 'average-course-engagement';\n// Stores the current time method, allowing us to update the graph without supplying values.\nlet START_TIME = null;\nlet END_TIME = null;\n// Toggles the retrieval of a single course vs all courses enrolleid in.\nlet SHOW_ALL_COURSES = false;\n\nlet COLOURS = [];\n\n/**\n * Retrieves data from the local_ace webservice to populate an engagement graph\n *\n * @param {Object} parameters Data passed from the server.\n */\nexport const init = (parameters) => {\n    USER_ID = parameters.userid;\n    COLOURS = parameters.colours;\n    COMPARISON_OPTION = parameters.chartcomparisonmethod;\n\n    filtersInit(updateGraph, parameters.defaultchartfilter ?? 'course-to-date');\n\n    // Hide the 'Show all courses' button on every tab except 'Overall' (course=0).\n    let params = new URLSearchParams(new URL(window.location.href).search);\n    if (params.has('course')) {\n        if (parseInt(params.get('course')) === 0) {\n            document.querySelector('#show-courses-buttons').style.display = null;\n        }\n    } else {\n        document.querySelector('#show-courses-buttons').style.display = null;\n    }\n\n    let chartComparisonButton = document.querySelector(\"#chart-comparison\");\n    chartComparisonButton.addEventListener(\"click\", createChartComparisonModal);\n\n    document.querySelector(\"#show-all-courses\").addEventListener(\"click\", showAllCourses);\n    document.querySelector(\"#show-your-course\").addEventListener(\"click\", showYourCourse);\n};\n\nconst showAllCourses = function() {\n    document.querySelector(\"#show-all-courses\").style.display = 'none';\n    document.querySelector(\"#show-your-course\").style.display = null;\n    SHOW_ALL_COURSES = true;\n    document.querySelector(\"#student-engagement-legend\").style.display = 'none';\n    updateGraph();\n};\n\nconst showYourCourse = function() {\n    document.querySelector(\"#show-your-course\").style.display = 'none';\n    document.querySelector(\"#show-all-courses\").style.display = null;\n    document.querySelector(\"#student-engagement-legend\").style.display = null;\n    SHOW_ALL_COURSES = false;\n    updateGraph();\n};\n\n/**\n * Creates the chart comparison modal.\n */\nconst createChartComparisonModal = function() {\n    var modalPromise = ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL});\n\n    modalPromise.then(function(modal) {\n        modal.getRoot()[0].classList.add('local_ace-slim-modal');\n        modal.setTitle(\"Change course comparison data\");\n        let templatePromise = Templates.render('local_ace/chart_comparison_body', {});\n        modal.setBody(templatePromise);\n        modal.setSaveButtonText(\"Filter\");\n\n        // Check the comparison option on load.\n        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n            document.querySelector('#comparison-' + COMPARISON_OPTION).checked = true;\n            // If all courses are shown then we cannot show comparisons.\n            if (SHOW_ALL_COURSES) {\n                let elements = document.querySelectorAll('input[name=\"comparison-options\"]');\n                elements.forEach((ele) => {\n                    ele.disabled = true;\n                });\n            }\n        });\n\n        // Update COMPARISON_OPTION when the modal is saved.\n        modal.getRoot().on(ModalEvents.save, function() {\n            let checkedElement = document.querySelector('input[name=\"comparison-options\"]:checked');\n            if (checkedElement !== null) {\n                COMPARISON_OPTION = checkedElement.value;\n            } else {\n                COMPARISON_OPTION = 'none';\n            }\n            updateGraph();\n            updateComparisonMethodPreference();\n        });\n\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden, removes modal HTML from document.\n            modal.destroy();\n        });\n\n        modal.show();\n\n        return modal;\n    }).fail(Notification.exception);\n};\n\n/**\n * Update the graph display based on values fetched from a webservice.\n *\n * @param {Number|null} startDatetime\n * @param {Number|null} endDateTime\n */\nconst updateGraph = (startDatetime = START_TIME, endDateTime = END_TIME) => {\n    if (START_TIME !== startDatetime) {\n        START_TIME = startDatetime;\n    }\n    if (END_TIME !== endDateTime) {\n        END_TIME = endDateTime;\n    }\n\n    let url = new URL(window.location.href);\n    let params = new URLSearchParams(url.search);\n    let courseid = 0;\n    if (params.has('course')) {\n        courseid = parseInt(params.get('course'));\n    }\n    let engagementDataPromise = getUserEngagementData(courseid, USER_ID, START_TIME, END_TIME)\n        .then(function(response) {\n            // Check for any errors before processing.\n            if (response.error !== null) {\n                displayError(response.error);\n                return null;\n            } else if (response.data.length === 0) {\n                getString('noanalytics', 'local_ace').then((langString) => {\n                    displayError(langString);\n                    return;\n                }).catch();\n                return null;\n            }\n\n            // Populate empty fields.\n            let graphData = getGraphDataPlaceholder();\n            graphData.legend_options.display = SHOW_ALL_COURSES;\n            // Create individual series data.\n            let i = 0;\n            response.data.forEach((data) => {\n                let series = getSeriesPlaceholder();\n                series.label = data.label;\n                series.values = data.values;\n                if (SHOW_ALL_COURSES || data.colour === undefined) {\n                    // Choose a colour from the array and wrap around when reaching the end.\n                    series.colors = [COLOURS[i % COLOURS.length]];\n                    i++;\n                } else {\n                    series.colors = [data.colour];\n                }\n                series.fill = data.fill ? 1 : null;\n                graphData.series.push(series);\n            });\n            graphData.labels = response.xlabels;\n            graphData.axes.y[0].max = 100;\n            graphData.axes.y[0].stepSize = 25;\n            let yLabels = {};\n            response.ylabels.forEach((element) => {\n                yLabels[element.value] = element.label;\n            });\n            graphData.axes.y[0].labels = yLabels;\n\n            return graphData;\n        }).catch(function() {\n            displayError(\"API returned an error\");\n        });\n\n    engagementDataPromise.then((data) => {\n        if (data === null) {\n            return;\n        }\n        let chartArea = document.querySelector('#chart-area-engagement');\n        let chartImage = chartArea.querySelector('.chart-image');\n        chartImage.innerHTML = \"\";\n        ChartBuilder.make(data).then((chart) => {\n            // Render graph\n            let chartoutput = new ChartJSOutput(chartImage, chart);\n            // Disable autoskip on x axis.\n            let chartjs = chartoutput._chartjs;\n            chartjs.options.scales.xAxes[0].ticks.minor.autoSkip = false;\n            chartjs.update();\n            return;\n        }).catch();\n        return;\n    }).catch();\n};\n\n/**\n * Display an error on the page, which replaces the engagement graphs on the page.\n *\n * @param {String} langString Text displayed on the page\n */\nconst displayError = (langString) => {\n    let chartArea = document.querySelector('#chart-area-engagement');\n    let chartImage = chartArea.querySelector('.chart-image');\n    chartImage.innerHTML = langString;\n};\n\n/**\n * Get analytics data for specific user and course, within a certain period and after a starting time.\n *\n * @param {Number|null} courseid Course ID\n * @param {Number} userid User ID\n * @param {Number} start Start time of analytics period in seconds\n * @param {Number} end End of analytics period in seconds\n * @param {String} comparison Comparison method\n * @returns {Promise}\n */\nconst getUserEngagementData = (courseid, userid, start, end, comparison = COMPARISON_OPTION) => {\n    return Ajax.call([{\n        methodname: 'local_ace_get_user_analytics_graph',\n        args: {\n            'courseid': courseid,\n            'userid': userid,\n            'start': start,\n            'end': end,\n            'comparison': comparison,\n            'showallcourses': SHOW_ALL_COURSES,\n        },\n    }])[0];\n};\n\n/**\n * Updates the comparison method user preference.\n */\nconst updateComparisonMethodPreference = function() {\n    let request = {\n        methodname: 'core_user_update_user_preferences',\n        args: {\n            preferences: [\n                {\n                    type: 'local_ace_comparison_method',\n                    value: COMPARISON_OPTION\n                }\n            ]\n        }\n    };\n\n    Ajax.call([request])[0].fail(Notification.exception);\n};\n\n/**\n * Get a graph.js data object filled out with the values we need for a student engagement graph.\n *\n * @returns {Object}\n */\nconst getGraphDataPlaceholder = () => {\n    return {\n        \"type\": \"line\",\n        \"series\": [],\n        \"labels\": null,\n        \"title\": null,\n        \"axes\": {\n            \"x\": [],\n            \"y\": [\n                {\n                    \"label\": null,\n                    \"labels\": {},\n                    \"max\": null,\n                    \"min\": 0,\n                    \"position\": null,\n                    \"stepSize\": null\n                }\n            ]\n        },\n        \"legend_options\": {\n            \"display\": false\n        },\n        \"config_colorset\": null,\n        \"smooth\": true\n    };\n};\n\nconst getSeriesPlaceholder = () => {\n    return {\n        \"label\": \"\",\n        \"labels\": null,\n        \"type\": null,\n        \"values\": [],\n        \"colors\": [],\n        \"fill\": null,\n        \"axes\": {\n            \"x\": null,\n            \"y\": null\n        },\n        \"urls\": [],\n        \"smooth\": null\n    };\n};\n"],"names":["USER_ID","COMPARISON_OPTION","START_TIME","END_TIME","SHOW_ALL_COURSES","COLOURS","parameters","userid","colours","chartcomparisonmethod","updateGraph","defaultchartfilter","params","URLSearchParams","URL","window","location","href","search","has","parseInt","get","document","querySelector","style","display","addEventListener","createChartComparisonModal","showAllCourses","showYourCourse","ModalFactory","create","type","types","SAVE_CANCEL","then","modal","getRoot","classList","add","setTitle","templatePromise","Templates","render","setBody","setSaveButtonText","on","ModalEvents","bodyRendered","checked","querySelectorAll","forEach","ele","disabled","save","checkedElement","value","updateComparisonMethodPreference","hidden","destroy","show","fail","Notification","exception","startDatetime","endDateTime","url","courseid","engagementDataPromise","getUserEngagementData","response","error","displayError","data","length","langString","catch","graphData","getGraphDataPlaceholder","legend_options","i","series","getSeriesPlaceholder","label","values","undefined","colour","colors","fill","push","labels","xlabels","axes","y","max","stepSize","yLabels","ylabels","element","chartImage","innerHTML","make","chart","chartjs","ChartJSOutput","_chartjs","options","scales","xAxes","ticks","minor","autoSkip","update","start","end","comparison","Ajax","call","methodname","args","request","preferences"],"mappings":"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"}