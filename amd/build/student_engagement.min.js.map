{"version":3,"sources":["../src/student_engagement.js"],"names":["USER_ID","COMPARISON_OPTION","START_TIME","END_TIME","SHOW_ALL_COURSES","COURSE_COLOUR_MATCH","init","parameters","userid","updateGraph","chartComparisonButton","document","querySelector","addEventListener","createChartComparisonModal","showAllCourses","showYourCourse","style","display","modalPromise","ModalFactory","create","type","types","SAVE_CANCEL","then","modal","getRoot","classList","add","setTitle","templatePromise","Templates","render","setBody","setSaveButtonText","on","ModalEvents","bodyRendered","checked","elements","querySelectorAll","forEach","ele","disabled","save","checkedElement","value","hidden","destroy","show","fail","Notification","exception","startDatetime","endDateTime","url","URL","window","location","href","params","URLSearchParams","search","courseid","has","parseInt","get","engagementDataPromise","getUserEngagementData","response","error","displayError","data","length","langString","catch","graphData","getGraphDataPlaceholder","legend_options","series","getSeriesPlaceholder","label","values","colour","Math","random","toString","colors","fill","push","labels","xlabels","axes","y","max","stepSize","stepsize","yLabels","ylabels","element","chartArea","chartImage","innerHTML","ChartBuilder","make","chart","ChartJSOutput","start","end","comparison","Ajax","call","methodname","args"],"mappings":"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","sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Uses the local_ace webservices to create engagement charts\n *\n * @module      local_ace/student_engagement\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport ModalEvents from \"core/modal_events\";\nimport ChartBuilder from 'core/chart_builder';\nimport ChartJSOutput from 'core/chart_output_chartjs';\nimport {init as filtersInit} from 'local_ace/chart_filters';\n\nlet USER_ID = {};\n// Stores the chosen comparison method.\nlet COMPARISON_OPTION = 'average-course-engagement';\n// Stores the current time method, allowing us to update the graph without supplying values.\nlet START_TIME = null;\nlet END_TIME = null;\n// Toggles the retrieval of a single course vs all courses enrolled in.\nlet SHOW_ALL_COURSES = false;\n// Stores randomised colours against course shortnames.\nlet COURSE_COLOUR_MATCH = [];\n\n/**\n * Retrieves data from the local_ace webservice to populate an engagement graph\n *\n * @param {Object} parameters Data passed from the server.\n */\nexport const init = (parameters) => {\n    USER_ID = parameters.userid;\n    filtersInit(updateGraph);\n    updateGraph();\n\n    // Setup chart comparison control.\n    let chartComparisonButton = document.querySelector(\"#chart-comparison\");\n    chartComparisonButton.addEventListener(\"click\", createChartComparisonModal);\n\n    document.querySelector(\"#show-all-courses\").addEventListener(\"click\", showAllCourses);\n    document.querySelector(\"#show-your-course\").addEventListener(\"click\", showYourCourse);\n};\n\nconst showAllCourses = function() {\n    document.querySelector(\"#show-all-courses\").style.display = 'none';\n    document.querySelector(\"#show-your-course\").style.display = null;\n    SHOW_ALL_COURSES = true;\n    document.querySelector(\"#student-engagement-legend\").style.display = 'none';\n    updateGraph();\n};\n\nconst showYourCourse = function() {\n    document.querySelector(\"#show-your-course\").style.display = 'none';\n    document.querySelector(\"#show-all-courses\").style.display = null;\n    document.querySelector(\"#student-engagement-legend\").style.display = null;\n    SHOW_ALL_COURSES = false;\n    updateGraph();\n};\n\n/**\n * Creates the chart comparison modal.\n */\nconst createChartComparisonModal = function() {\n    var modalPromise = ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL});\n\n    modalPromise.then(function(modal) {\n        modal.getRoot()[0].classList.add('chart-comparison-modal');\n        modal.setTitle(\"Change course comparison data\");\n        let templatePromise = Templates.render('local_ace/chart_comparison_body', {});\n        modal.setBody(templatePromise);\n        modal.setSaveButtonText(\"Filter\");\n\n        // Check the comparison option on load.\n        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n            document.querySelector('#comparison-' + COMPARISON_OPTION).checked = true;\n            // If all courses are shown then we cannot show comparisons.\n            if (SHOW_ALL_COURSES) {\n                let elements = document.querySelectorAll('input[name=\"comparison-options\"]');\n                elements.forEach((ele) => {\n                    ele.disabled = true;\n                });\n            }\n        });\n\n        // Update COMPARISON_OPTION when the modal is saved.\n        modal.getRoot().on(ModalEvents.save, function() {\n            let checkedElement = document.querySelector('input[name=\"comparison-options\"]:checked');\n            if (checkedElement !== null) {\n                COMPARISON_OPTION = checkedElement.value;\n            } else {\n                COMPARISON_OPTION = 'none';\n            }\n            updateGraph();\n        });\n\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden, removes modal HTML from document.\n            modal.destroy();\n        });\n\n        modal.show();\n\n        return modal;\n    }).fail(Notification.exception);\n};\n\n/**\n * Update the graph display based on values fetched from a webservice.\n *\n * @param {Number|null} startDatetime\n * @param {Number|null} endDateTime\n */\nconst updateGraph = (startDatetime = START_TIME, endDateTime = END_TIME) => {\n    if (START_TIME !== startDatetime) {\n        START_TIME = startDatetime;\n    }\n    if (END_TIME !== endDateTime) {\n        END_TIME = endDateTime;\n    }\n\n    let url = new URL(window.location.href);\n    let params = new URLSearchParams(url.search);\n    let courseid = null;\n    if (params.has('course')) {\n        courseid = parseInt(params.get('course'));\n    }\n    let engagementDataPromise = getUserEngagementData(courseid, USER_ID, START_TIME, END_TIME)\n        .then(function(response) {\n            if (response.error !== null) {\n                displayError(response.error);\n                return null;\n            } else if (response.data.length === 0) {\n                getString('noanalytics', 'local_ace').then((langString) => {\n                    displayError(langString);\n                    return;\n                }).catch();\n                return null;\n            }\n\n            // Populate empty fields.\n            let graphData = getGraphDataPlaceholder();\n            graphData.legend_options.display = SHOW_ALL_COURSES;\n            // Create individual series data.\n            response.data.forEach((data) => {\n                let series = getSeriesPlaceholder();\n                series.label = data.label;\n                series.values = data.values;\n                if (SHOW_ALL_COURSES || data.colour === undefined) {\n                    if (!COURSE_COLOUR_MATCH[series.label]) {\n                        COURSE_COLOUR_MATCH[series.label] = parseInt(Math.random() * 0xffffff).toString(16);\n                    }\n                    series.colors = ['#' + COURSE_COLOUR_MATCH[series.label]];\n                } else {\n                    series.colors = [data.colour];\n                }\n                series.fill = data.fill ? 1 : null;\n                graphData.series.push(series);\n            });\n            graphData.labels = response.xlabels;\n            graphData.axes.y[0].max = response.max;\n            graphData.axes.y[0].stepSize = response.stepsize;\n            let yLabels = {};\n            response.ylabels.forEach((element) => {\n                yLabels[element.value] = element.label;\n            });\n            graphData.axes.y[0].labels = yLabels;\n\n            return graphData;\n        }).catch(function() {\n            displayError(\"API returned an error\");\n        });\n\n    engagementDataPromise.then((data) => {\n        if (data === null) {\n            return;\n        }\n        let chartArea = document.querySelector('#chart-area-engagement');\n        let chartImage = chartArea.querySelector('.chart-image');\n        chartImage.innerHTML = \"\";\n        ChartBuilder.make(data).then((chart) => {\n            new ChartJSOutput(chartImage, chart);\n            return;\n        }).catch();\n        return;\n    }).catch();\n};\n\n/**\n * Display an error on the page, which replaces the engagement graphs on the page.\n *\n * @param {String} langString Text displayed on the page\n */\nconst displayError = (langString) => {\n    let chartArea = document.querySelector('#chart-area-engagement');\n    let chartImage = chartArea.querySelector('.chart-image');\n    chartImage.innerHTML = langString;\n};\n\n/**\n * Get analytics data for specific user and course, within a certain period and after a starting time.\n *\n * @param {Number|null} courseid Course ID\n * @param {Number} userid User ID\n * @param {Number} start Start time of analytics period in seconds\n * @param {Number} end End of analytics period in seconds\n * @param {String} comparison Comparison method\n * @returns {Promise}\n */\nconst getUserEngagementData = (courseid, userid, start, end, comparison = COMPARISON_OPTION) => {\n    return Ajax.call([{\n        methodname: 'local_ace_get_user_analytics_graph',\n        args: {\n            'courseid': courseid,\n            'userid': userid,\n            'start': start,\n            'end': end,\n            'comparison': comparison,\n            'showallcourses': SHOW_ALL_COURSES,\n        },\n    }])[0];\n};\n\n/**\n * Get a graph.js data object filled out with the values we need for a student engagement graph.\n *\n * @returns {Object}\n */\nconst getGraphDataPlaceholder = () => {\n    return {\n        \"type\": \"line\",\n        \"series\": [],\n        \"labels\": null,\n        \"title\": null,\n        \"axes\": {\n            \"x\": [],\n            \"y\": [\n                {\n                    \"label\": null,\n                    \"labels\": {},\n                    \"max\": null,\n                    \"min\": 0,\n                    \"position\": null,\n                    \"stepSize\": null\n                }\n            ]\n        },\n        \"legend_options\": {\n            \"display\": false\n        },\n        \"config_colorset\": null,\n        \"smooth\": true\n    };\n};\n\nconst getSeriesPlaceholder = () => {\n    return {\n        \"label\": \"\",\n        \"labels\": null,\n        \"type\": null,\n        \"values\": [],\n        \"colors\": [],\n        \"fill\": null,\n        \"axes\": {\n            \"x\": null,\n            \"y\": null\n        },\n        \"urls\": [],\n        \"smooth\": null\n    };\n};\n"],"file":"student_engagement.min.js"}