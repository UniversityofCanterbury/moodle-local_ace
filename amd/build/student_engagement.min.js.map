{"version":3,"sources":["../src/student_engagement.js"],"names":["COLOUR_USER_HISTORY","USER_ID","init","parameters","colouruserhistory","userid","updateGraph","startDatetime","endDateTime","url","URL","window","location","href","params","URLSearchParams","search","courseid","has","parseInt","get","engagementDataPromise","getUserEngagementData","then","response","error","displayError","series","length","langString","catch","graphData","getGraphDataPlaceholder","values","comparison","forEach","getSeriesPlaceholder","label","colors","colour","fill","push","labels","axes","y","max","stepSize","stepsize","yLabels","ylabels","element","value","data","chartArea","document","querySelector","chartImage","innerHTML","ChartBuilder","make","chart","ChartJSOutput","start","end","Ajax","call","methodname","args"],"mappings":"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","sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Uses the local_ace webservices to create engagement charts\n *\n * @module      local_ace/student_engagement\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport ChartBuilder from 'core/chart_builder';\nimport ChartJSOutput from 'core/chart_output_chartjs';\nimport {init as filtersInit} from 'local_ace/chart_filters';\n\nlet COLOUR_USER_HISTORY;\nlet USER_ID = {};\n\n/**\n * Retrieves data from the local_ace webservice to populate an engagement graph\n *\n * @param {Object} parameters Data passed from the server.\n */\nexport const init = (parameters) => {\n    COLOUR_USER_HISTORY = parameters.colouruserhistory;\n    USER_ID = parameters.userid;\n    filtersInit(updateGraph);\n    updateGraph(null, null);\n};\n\n/**\n * Update the graph display based on values fetched from a webservice.\n *\n * @param {Number|null} startDatetime\n * @param {Number|null} endDateTime\n */\nconst updateGraph = (startDatetime, endDateTime) => {\n    let url = new URL(window.location.href);\n    let params = new URLSearchParams(url.search);\n    let courseid = null;\n    if (params.has('course')) {\n        courseid = parseInt(params.get('course'));\n    }\n    let engagementDataPromise = getUserEngagementData(courseid, USER_ID, startDatetime, endDateTime).then(function(response) {\n        if (response.error !== null) {\n            displayError(response.error);\n            return null;\n        } else if (response.series.length === 0) {\n            getString('noanalytics', 'local_ace').then((langString) => {\n                displayError(langString);\n                return;\n            }).catch();\n            return null;\n        }\n\n        // Populate empty fields.\n        let graphData = getGraphDataPlaceholder();\n        graphData.series[0].values = response.series;\n        // Create series for comparison data.\n        response.comparison.forEach((comparison) => {\n            let series = getSeriesPlaceholder();\n            series.label = comparison.label;\n            series.colors = [comparison.colour];\n            series.values = comparison.values;\n            series.fill = comparison.fill ? 1 : null;\n            graphData.series.push(series);\n        });\n        graphData.labels = response.labels;\n        graphData.axes.y[0].max = response.max;\n        graphData.axes.y[0].stepSize = response.stepsize;\n        let yLabels = {};\n        response.ylabels.forEach((element) => {\n            yLabels[element.value] = element.label;\n        });\n        graphData.axes.y[0].labels = yLabels;\n\n        return graphData;\n    }).catch(function() {\n        displayError(\"API returned an error\");\n    });\n\n    engagementDataPromise.then((data) => {\n        if (data === null) {\n            return;\n        }\n        let chartArea = document.querySelector('#chart-area-engagement');\n        let chartImage = chartArea.querySelector('.chart-image');\n        chartImage.innerHTML = \"\";\n        ChartBuilder.make(data).then((chart) => {\n            new ChartJSOutput(chartImage, chart);\n            return;\n        }).catch();\n        return;\n    }).catch();\n};\n\n/**\n * Display an error on the page, which replaces the engagement graphs on the page.\n *\n * @param {string} langString Text displayed on the page\n */\nconst displayError = (langString) => {\n    let chartArea = document.querySelector('#chart-area-engagement');\n    let chartImage = chartArea.querySelector('.chart-image');\n    chartImage.innerHTML = langString;\n};\n\n/**\n * Get analytics data for specific user and course, within a certain period and after a starting time.\n *\n * @param {number|null} courseid Course ID\n * @param {number} userid User ID\n * @param {number} start Start time of analytics period in seconds\n * @param {end} end End of analytics period in seconds\n * @returns {Promise}\n */\nconst getUserEngagementData = (courseid, userid, start, end) => {\n    return Ajax.call([{\n        methodname: 'local_ace_get_user_analytics_graph',\n        args: {\n            'courseid': courseid,\n            'userid': userid,\n            'start': start,\n            'end': end\n        },\n    }])[0];\n};\n\n/**\n * Get a graph.js data object filled out with the values we need for a student engagement graph.\n * TODO: Pull graph colours from plugin settings.\n *\n * @returns {Object}\n */\nconst getGraphDataPlaceholder = () => {\n    return {\n        \"type\": \"line\",\n        \"series\": [\n            {\n                \"label\": \"Your engagement\",\n                \"labels\": null,\n                \"type\": null,\n                \"values\": null,\n                \"colors\": [COLOUR_USER_HISTORY],\n                \"fill\": null,\n                \"axes\": {\n                    \"x\": null,\n                    \"y\": null\n                },\n                \"urls\": [],\n                \"smooth\": null\n            }\n        ],\n        \"labels\": null,\n        \"title\": null,\n        \"axes\": {\n            \"x\": [],\n            \"y\": [\n                {\n                    \"label\": null,\n                    \"labels\": {},\n                    \"max\": null,\n                    \"min\": 0,\n                    \"position\": null,\n                    \"stepSize\": null\n                }\n            ]\n        },\n        \"legend_options\": {\n            \"display\": false\n        },\n        \"config_colorset\": null,\n        \"smooth\": true\n    };\n};\n\nconst getSeriesPlaceholder = () => {\n    return {\n        \"label\": \"\",\n        \"labels\": null,\n        \"type\": null,\n        \"values\": [],\n        \"colors\": [],\n        \"fill\": null,\n        \"axes\": {\n            \"x\": null,\n            \"y\": null\n        },\n        \"urls\": [],\n        \"smooth\": null\n    };\n};\n"],"file":"student_engagement.min.js"}