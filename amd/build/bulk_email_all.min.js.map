{"version":3,"sources":["../src/bulk_email_all.js"],"names":["init","emailSend","Str","get_strings","key","component","then","langStrings","emailSelected","templatePromise","Templates","render","ModalFactory","create","title","body","type","types","SAVE_CANCEL","done","modal","getRoot","classList","add","setSaveButtonText","on","ModalEvents","save","tableuniqueid","document","querySelector","getAttribute","reportid","split","subject","value","sendBulkEmailsAll","response","Toast","message","hidden","destroy","show","catch","Notification","exception","Ajax","call","methodname","args"],"mappings":"ohBAuBC,OACA,OACA,OACA,OACA,OACA,O,ylBACO,GAAMA,CAAAA,CAAI,CAAG,UAAM,IAWlBC,CAAAA,CAAS,CAAG,EAXM,CAYtBC,CAAG,CAACC,WAAJ,CAXc,CACV,CACIC,GAAG,CAAE,WADT,CAEIC,SAAS,CAAE,WAFf,CADU,CAKV,CACID,GAAG,CAAE,cADT,CAEIC,SAAS,CAAE,WAFf,CALU,CAWd,EAAyBC,IAAzB,CAA8B,SAASC,CAAT,CAAsB,CAChDN,CAAS,CAAGM,CAAW,CAAC,CAAD,CAAvB,CADgD,GAE5CC,CAAAA,CAAa,CAAGD,CAAW,CAAC,CAAD,CAFiB,CAG5CE,CAAe,CAAGC,UAAUC,MAAV,CAAiB,+BAAjB,CAAkD,EAAlD,CAH0B,CAIhD,MAAOC,WAAaC,MAAb,CAAoB,CACvBC,KAAK,CAAEN,CADgB,CAEvBO,IAAI,CAAEN,CAFiB,CAGvBO,IAAI,CAAEJ,UAAaK,KAAb,CAAmBC,WAHF,CAApB,CAKV,CATD,EASGC,IATH,CASQ,SAASC,CAAT,CAAgB,CACpBA,CAAK,CAACC,OAAN,GAAgB,CAAhB,EAAmBC,SAAnB,CAA6BC,GAA7B,CAAiC,sBAAjC,EACAH,CAAK,CAACI,iBAAN,CAAwBvB,CAAxB,EACAmB,CAAK,CAACC,OAAN,GAAgBI,EAAhB,CAAmBC,UAAYC,IAA/B,CAAqC,UAAW,CAC5C,GAAIC,CAAAA,CAAa,CAAGC,QAAQ,CAACC,aAAT,CAAuB,2CAAvB,CAApB,CACA,GAAsB,IAAlB,GAAAF,CAAJ,CAA4B,CACzBA,CAAa,CAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAClB,CACDF,CAAa,CAAGA,CAAa,CAACG,YAAd,CAA2B,qBAA3B,CAAhB,CAL4C,GAMxCC,CAAAA,CAAQ,CAAGJ,CAAa,CAACK,KAAd,CAAoB,sBAApB,EAA4C,CAA5C,CAN6B,CAOxCC,CAAO,CAAGL,QAAQ,CAACC,aAAT,CAAuB,0BAAvB,EAAmDK,KAPrB,CAQxCpB,CAAI,CAAGc,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,EAAgDK,KARf,CAS5CC,CAAiB,CAACJ,CAAD,CAAWE,CAAX,CAAoBnB,CAApB,CAAjB,CAA2CT,IAA3C,CAAgD,SAAA+B,CAAQ,CAAI,OACzDC,CAAK,CAACf,GAAN,WAAUc,CAAQ,CAACE,OAAnB,gBAA8B,mBAA9B,CAAmD,EAAnD,CACF,CAFD,CAGH,CAZD,EAcAnB,CAAK,CAACC,OAAN,GAAgBI,EAAhB,CAAmBC,UAAYc,MAA/B,CAAuC,UAAW,CAE9CpB,CAAK,CAACqB,OAAN,EACH,CAHD,EAKArB,CAAK,CAACsB,IAAN,EAEH,CAjCD,EAiCGC,KAjCH,CAiCSC,YAAY,CAACC,SAjCtB,CAkCH,CA9CM,C,SAwDP,GAAMT,CAAAA,CAAiB,CAAG,SAACJ,CAAD,CAAWE,CAAX,CAAoBnB,CAApB,CAA6B,CACnD,MAAO+B,WAAKC,IAAL,CAAU,CAAC,CACdC,UAAU,CAAE,gCADE,CAEdC,IAAI,CAAE,CACF,SAAYjB,CADV,CAEF,QAAWE,CAFT,CAGF,KAAQnB,CAHN,CAFQ,CAAD,CAAV,EAOH,CAPG,CAQV,C","sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Bulk email all students in a report\n *\n * @module      local_ace/bulk_emails_all\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n import ModalFactory from 'core/modal_factory';\n import Templates from 'core/templates';\n import ModalEvents from \"core/modal_events\";\n import * as Str from 'core/str';\n import Ajax from 'core/ajax';\n import * as Toast from 'core/toast';\n export const init = () => {\n     let strings = [\n         {\n             key: 'emailsend',\n             component: 'local_ace'\n         },\n         {\n             key: 'bulkemailall',\n             component: 'local_ace',\n         }\n     ];\n     let emailSend = '';\n     Str.get_strings(strings).then(function(langStrings) {\n         emailSend = langStrings[0];\n         let emailSelected = langStrings[1];\n         let templatePromise = Templates.render('local_ace/bulk_email_selected', {});\n         return ModalFactory.create({\n             title: emailSelected,\n             body: templatePromise,\n             type: ModalFactory.types.SAVE_CANCEL,\n         });\n     }).done(function(modal) {\n         modal.getRoot()[0].classList.add('local_ace-slim-modal');\n         modal.setSaveButtonText(emailSend);\n         modal.getRoot().on(ModalEvents.save, function() {\n             let tableuniqueid = document.querySelector('.tab-pane.fade.active.show .table-dynamic');\n             if (tableuniqueid === null) {\n                tableuniqueid = document.querySelector('.table-dynamic');\n             }\n             tableuniqueid = tableuniqueid.getAttribute('data-table-uniqueid');\n             let reportid = tableuniqueid.split('custom-report-table-')[1];\n             let subject = document.querySelector('#local_ace-email-subject').value;\n             let body = document.querySelector('#local_ace-email-body').value;\n             sendBulkEmailsAll(reportid, subject, body).then(response => {\n                Toast.add(response.message ?? 'An error occurred', {});\n             });\n         });\n         // Handle hidden event.\n         modal.getRoot().on(ModalEvents.hidden, function() {\n             // Destroy when hidden.\n             modal.destroy();\n         });\n         // Show the modal.\n         modal.show();\n         return;\n     }).catch(Notification.exception);\n };\n\n /**\n  * Send bulk email to all of the users in a report.\n  *\n  * @param {Int} reportid\n  * @param {String} subject\n  * @param {String} body\n  * @return {Promise}\n  */\n const sendBulkEmailsAll = (reportid, subject, body) => {\n     return Ajax.call([{\n         methodname: 'local_ace_send_bulk_emails_all',\n         args: {\n             'reportid': reportid,\n             'subject': subject,\n             'body': body\n         },\n     }])[0];\n };"],"file":"bulk_email_all.min.js"}