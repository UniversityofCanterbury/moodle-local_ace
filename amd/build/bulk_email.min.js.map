{"version":3,"sources":["../src/bulk_email.js"],"names":["init","emailSend","Str","get_strings","key","component","then","langStrings","emailSelected","templatePromise","Templates","render","ModalFactory","create","title","body","type","types","SAVE_CANCEL","done","modal","getRoot","classList","add","setSaveButtonText","on","ModalEvents","save","userids","selectedRows","document","querySelectorAll","forEach","checkbox","push","parseInt","dataset","id","subject","querySelector","value","sendBulkEmails","response","Toast","message","hidden","destroy","show","catch","Notification","exception","Ajax","call","methodname","args"],"mappings":"ghBAuBA,OACA,OACA,OACA,OACA,OACA,O,ylBAEO,GAAMA,CAAAA,CAAI,CAAG,UAAM,IAYlBC,CAAAA,CAAS,CAAG,EAZM,CAatBC,CAAG,CAACC,WAAJ,CAZc,CACV,CACIC,GAAG,CAAE,WADT,CAEIC,SAAS,CAAE,WAFf,CADU,CAKV,CACID,GAAG,CAAE,mBADT,CAEIC,SAAS,CAAE,WAFf,CALU,CAYd,EAAyBC,IAAzB,CAA8B,SAASC,CAAT,CAAsB,CAChDN,CAAS,CAAGM,CAAW,CAAC,CAAD,CAAvB,CADgD,GAE5CC,CAAAA,CAAa,CAAGD,CAAW,CAAC,CAAD,CAFiB,CAG5CE,CAAe,CAAGC,UAAUC,MAAV,CAAiB,+BAAjB,CAAkD,EAAlD,CAH0B,CAKhD,MAAOC,WAAaC,MAAb,CAAoB,CACvBC,KAAK,CAAEN,CADgB,CAEvBO,IAAI,CAAEN,CAFiB,CAGvBO,IAAI,CAAEJ,UAAaK,KAAb,CAAmBC,WAHF,CAApB,CAKV,CAVD,EAUGC,IAVH,CAUQ,SAASC,CAAT,CAAgB,CACpBA,CAAK,CAACC,OAAN,GAAgB,CAAhB,EAAmBC,SAAnB,CAA6BC,GAA7B,CAAiC,sBAAjC,EACAH,CAAK,CAACI,iBAAN,CAAwBvB,CAAxB,EACAmB,CAAK,CAACC,OAAN,GAAgBI,EAAhB,CAAmBC,UAAYC,IAA/B,CAAqC,UAAW,IACxCC,CAAAA,CAAO,CAAG,EAD8B,CAExCC,CAAY,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,8CAA1B,CAFyB,CAI5CF,CAAY,CAACG,OAAb,CAAqB,SAACC,CAAD,CAAc,CAC/BL,CAAO,CAACM,IAAR,CAAaC,QAAQ,CAACF,CAAQ,CAACG,OAAT,CAAiBC,EAAlB,CAArB,CACH,CAFD,EAJ4C,GAQxCC,CAAAA,CAAO,CAAGR,QAAQ,CAACS,aAAT,CAAuB,0BAAvB,EAAmDC,KARrB,CASxCzB,CAAI,CAAGe,QAAQ,CAACS,aAAT,CAAuB,uBAAvB,EAAgDC,KATf,CAW5CC,CAAc,CAACb,CAAD,CAAUU,CAAV,CAAmBvB,CAAnB,CAAd,CAAuCT,IAAvC,CAA4C,SAAAoC,CAAQ,CAAI,OACrDC,CAAK,CAACpB,GAAN,WAAUmB,CAAQ,CAACE,OAAnB,gBAA8B,mBAA9B,CAAmD,EAAnD,CACF,CAFD,CAGH,CAdD,EAiBAxB,CAAK,CAACC,OAAN,GAAgBI,EAAhB,CAAmBC,UAAYmB,MAA/B,CAAuC,UAAW,CAE9CzB,CAAK,CAAC0B,OAAN,EACH,CAHD,EAMA1B,CAAK,CAAC2B,IAAN,EAEH,CAtCD,EAsCGC,KAtCH,CAsCSC,YAAY,CAACC,SAtCtB,CAuCH,CApDM,C,SA8DP,GAAMT,CAAAA,CAAc,CAAG,SAACb,CAAD,CAAUU,CAAV,CAAmBvB,CAAnB,CAA4B,CAC/C,MAAOoC,WAAKC,IAAL,CAAU,CAAC,CACdC,UAAU,CAAE,4BADE,CAEdC,IAAI,CAAE,CACF,QAAW1B,CADT,CAEF,QAAWU,CAFT,CAGF,KAAQvB,CAHN,CAFQ,CAAD,CAAV,EAOH,CAPG,CAQV,C","sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Bulk email all students selected on the table\n *\n * @module      local_ace/bulk_emails\n * @copyright   2021 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport ModalEvents from \"core/modal_events\";\nimport * as Str from 'core/str';\nimport Ajax from 'core/ajax';\nimport * as Toast from 'core/toast';\n\nexport const init = () => {\n    let strings = [\n        {\n            key: 'emailsend',\n            component: 'local_ace'\n        },\n        {\n            key: 'bulkemailselected',\n            component: 'local_ace',\n        }\n    ];\n\n    let emailSend = '';\n    Str.get_strings(strings).then(function(langStrings) {\n        emailSend = langStrings[0];\n        let emailSelected = langStrings[1];\n        let templatePromise = Templates.render('local_ace/bulk_email_selected', {});\n\n        return ModalFactory.create({\n            title: emailSelected,\n            body: templatePromise,\n            type: ModalFactory.types.SAVE_CANCEL,\n        });\n    }).done(function(modal) {\n        modal.getRoot()[0].classList.add('local_ace-slim-modal');\n        modal.setSaveButtonText(emailSend);\n        modal.getRoot().on(ModalEvents.save, function() {\n            let userids = [];\n            let selectedRows = document.querySelectorAll('input[name=\"reportbuilder-select\"]:checked');\n\n            selectedRows.forEach((checkbox) => {\n                userids.push(parseInt(checkbox.dataset.id));\n            });\n\n            let subject = document.querySelector('#local_ace-email-subject').value;\n            let body = document.querySelector('#local_ace-email-body').value;\n\n            sendBulkEmails(userids, subject, body).then(response => {\n               Toast.add(response.message ?? 'An error occurred', {});\n            });\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Show the modal.\n        modal.show();\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Send bulk email to a list of users.\n *\n * @param {Array[]} userids\n * @param {String} subject\n * @param {String} body\n * @return {Promise}\n */\nconst sendBulkEmails = (userids, subject, body) => {\n    return Ajax.call([{\n        methodname: 'local_ace_send_bulk_emails',\n        args: {\n            'userids': userids,\n            'subject': subject,\n            'body': body\n        },\n    }])[0];\n};\n"],"file":"bulk_email.min.js"}